@startuml

!include https://raw.githubusercontent.com/alextheartisan/plantuml-themes/master/src/themes/pretty.iuml
!include https://raw.githubusercontent.com/alextheartisan/plantuml-themes/master/src/definitions/entities.iuml
hide empty members

left to right direction

!unquoted procedure computed($name, $mod = "")
    entity( Computed, $name, $mod )
!endprocedure

skinparam ClassHeaderBackgroundColor<<Store>> aliceblue
skinparam ClassBorderColor<<Store>> cornflowerblue
skinparam StereotypeCBackgroundColor<<Store>> lightblue
skinparam StereotypeCBorderColor<<Store>> lightskyblue

skinparam ClassHeaderBackgroundColor<<Computed>> palegoldenrod
skinparam ClassBorderColor<<Computed>> goldenrod
skinparam StereotypeCBackgroundColor<<Computed>> palegoldenrod
skinparam StereotypeCBorderColor<<Computed>> saddlebrown

package insertions {
    view(Insertion)
}

package notes {
    view(Note)
    api(NotesApi) {
        getNoteIds(): NoteId[]
        getRawNote(): string
        getProcessedNote(): VFile
    }
}

package markdown {
    service(Processor) {
        configure(options: Options): void
        process(string: string): VFile
    }
}

package notes.canvas {
    view(DragContainer)
    view(DraggableNote)
    view(Minimap)
    view(NoteOutliner)
    view(SelectedOutliner)

    DragContainer --> DraggableNote
}

package notes.aside {
    view(Header)
    view(NoteArea)
    view(NoteLink)
    view(NoteTitle)
    view(RootComponent)

    RootComponent --> Header
    RootComponent --> NoteArea

    store(Notes, "notes.aside") {
        openedNotes: NoteId[]
        open(id: NoteId)
        close(id: NoteId)
        closeOthers(id: NoteId)
    }
}

package notes.layout {
    class Position {
        {static} Zero
        ---
        x
        y
    }

    store(Scroll) {
        position: Position
        set(position: Position)
    }

    computed(Center) {
        center: Position
    }

    computed(Bucket) {
        bucket: Bucket
    }

    Center --> Scroll
    Bucket --> Center

    store(Notes, "notes.layout") {
        record: Record<NoteId, Position>
        set(id: NoteId, position: Position)
        setBy(id: NoteId, delta: Position)
        remove(id: NoteId)
    }

    computed(BucketedNotes) {
        bucketed: Record<Bucket, NoteId>
    }

    computed(VisibleNotes) {
        visible: NoteId[]
    }

    BucketedNotes --> notes.layout.Notes
    VisibleNotes --> BucketedNotes
    VisibleNotes -> Bucket

    store(SelectedNotes, "notes.layout") {
        selected: NoteId[]
        select(id: NoteId)
        deselect(id: NoteId)
        deselectAll()
        toggleSelection(id: NoteId)
    }
    store(Mode) {
        mode: Mode
        set(mode: Mode)
    }
}

notes.canvas --> notes.layout
notes.canvas ---> notes
notes.aside ---> notes
notes --> markdown

'DragContainer ---> Mode
'DragContainer ---> VisibleNotes
'Minimap ---> VisibleNotes
'NoteOutliner ---> VisibleNotes
'SelectedOutliner --> notes.layout.SelectedNotes

'NotesApi --> Processor: process()
@enduml
